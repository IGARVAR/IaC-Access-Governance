## IaC-Access-Governance

**Infrastructure-as-Code for Identity & Access Management**  
Governance-driven provisioning, ownership enforcement, and reporting for Active Directory and Microsoft Teams.

## Overview

This repository provides a curated collection of PowerShell automation tools to implement robust access governance through Infrastructure-as-Code (IaC). It is designed to support enterprises moving toward GitOps, Zero Trust, and least privilege models by enforcing declarative role structures and group metadata standards.

### Key Highlights:
- Declarative role provisioning via `roles.template.json` or `.yaml`
- GitOps-compatible workflows for AD and Teams sync
- Automated enforcement of `managedBy`, `description`, and classification attributes
- Identity audits based on user or group metadata
- Orphaned group detection and compliance tagging

---

## Primary Use Cases

- Provision ROLE/RES groups from structured role templates (JSON/YAML)
- Automate Microsoft Teams creation and metadata alignment with Active Directory
- Audit AD environments for unmanaged, untagged, or orphaned groups
- Sync GitHub or DevOps source-of-truth role files with M365/AD
- Trace all access paths for a user by UPN or email
- Reverse-map Teams to AD via `extensionAttribute11` linking

---

## File Structure

## File Structure

| Script                                        | Description                                                                |
|-----------------------------------------------|----------------------------------------------------------------------------|
| `IaC_OPER_Create_MS_Teams_with_RES_Group.ps1` | Creates a Team and RES group with metadata and extension attributes.       |
| `IaC_OPER_Bulk_Add_Users_to_Role.ps1`         | Adds users to AD ROLE groups via validated CSV.                            |
| `IaC_OPER_GitHub_Teams_Group_Sync.ps1`        | Syncs GitHub team membership to AD or M365 groups.                         |
| `IaC_OPER_Set_ManagedBy_and_Metadata.ps1`     | Applies ownership/metadata from `roles.template.json`.                     |
| `IaC_REPORT_ZeroTrust_Orphaned_AD_Groups.ps1` | Finds unmanaged, empty, untagged AD groups for review.                     |
| `IaC_REPORT_AD_Groups_ManagedBy.ps1`          | Exports all AD groups with `managedBy` metadata.                           |
| `IaC_REPORT_User_Groups.ps1`                  | Lists AD groups for a given `samAccountName`.                              |
| `IaC_REPORT_User_Groups_By_Email.ps1`         | Resolves group membership via email or UPN.                                |
| `IaC_REPORT_MSTeams_ID_to_RES_Group.ps1`      | Maps Teams `GroupId` to RES AD group via extensionAttribute11.             |
| `IaC_REPORT_SEQ_Groups_DisplayName_OU.ps1`    | Filters AD groups by naming convention and OU structure.                   |


---

## Template Structure

Role templates can be stored as `roles.template.json` or `.yaml` and used as a GitOps-compatible source of truth for ownership and compliance metadata.

```json
[
  {
    "GroupName": "ROLE_AD_ENGINEERING",
    "ManagedByUPN": "lead.eng@example.com",
    "Classification": "Confidential",
    "Sensitivity": "Internal"
  },
  {
    "GroupName": "RES_O365_TEAMS-MARKETING_MEMBER",
    "ManagedByUPN": "manager.marketing@example.com",
    "Classification": "Public",
    "Sensitivity": "External"
  }
]
